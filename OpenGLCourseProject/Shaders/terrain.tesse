#version 460                                                                              
 
layout(triangles, equal_spacing, ccw) in;                                                       

const int NUM_CASCADES = 3;

uniform mat4 Projection;
uniform mat4 View;    
uniform mat4 prevPVM;
	                                                                       
uniform sampler2D displacementMap;                                                             
uniform float dispFactor;                                                                      
uniform mat4 DirectionalLightTransforms[NUM_CASCADES]; 
  
struct OutputPatch
{
    vec3 WorldPos_B030;
    vec3 WorldPos_B021;
    vec3 WorldPos_B012;
    vec3 WorldPos_B003;
    vec3 WorldPos_B102;
    vec3 WorldPos_B201;
    vec3 WorldPos_B300;
    vec3 WorldPos_B210;
    vec3 WorldPos_B120;
    vec3 WorldPos_B111;
    vec3 Normal[3];
	vec3 Tangent[3];
    vec2 TexCoord[3];
};

in patch OutputPatch oPatch;  

out vec3 FragPos;                                                                        
out vec2 TexCoord;
out vec2 TexCoordTerr;                                                                        
out vec3 Normal; 
out mat3 TBN;
out vec4 DirectionalLightSpacePos[NUM_CASCADES]; 
out float ClipSpacePosZ;  

out vec4 ClipSpacePos;
out vec4 PrevClipSpacePos;                                                    

vec2 interpolate2D(vec2 v0, vec2 v1, vec2 v2)                                                   
{                                                                                               
    return vec2(gl_TessCoord.x) * v0 + vec2(gl_TessCoord.y) * v1 + vec2(gl_TessCoord.z) * v2;   
}                                                                                               

vec3 interpolate3D(vec3 v0, vec3 v1, vec3 v2)                                                   
{                                                                                               
    return vec3(gl_TessCoord.x) * v0 + vec3(gl_TessCoord.y) * v1 + vec3(gl_TessCoord.z) * v2;   
}                                                                                               

vec3 GetNormal(vec2 uv)
{
  vec2 tex_off = 1.0 / textureSize(displacementMap, 0);
  
  float u = texture2D(displacementMap, uv + tex_off * vec2(0.0, -1.0)).r * -dispFactor;
  float r = texture2D(displacementMap, uv + tex_off * vec2(1.0, 0.0)).r * -dispFactor;
  float l = texture2D(displacementMap, uv + tex_off * vec2(-1.0, 0.0)).r * -dispFactor;
  float d = texture2D(displacementMap, uv + tex_off * vec2(0.0, 1.0)).r * -dispFactor;
  
  vec3 n;
  n.z = u - d;
  n.x = l - r;
  n.y = 1.0 / (dispFactor/0.2f);
  return n;
} 
 
 mat3 CalcTBN(vec3 Normal, vec3 Tangent)
{
	vec3 normal = normalize(Normal);
    vec3 tangent = normalize(Tangent);
	tangent = normalize(tangent - normal*dot(normal, tangent));
	vec3 Bitangent = cross(normal, tangent);
	
	if (dot(cross(normal, tangent), Bitangent) < 0.0f){
		tangent = tangent * -1.0f;
	}
	
	mat3 TBN = mat3(tangent, Bitangent, normal);
	
	return TBN;
}	

 
void main()                                                                                     
{          	
    // Interpolate the attributes of the output vertex using the barycentric coordinates
    TexCoord = interpolate2D(oPatch.TexCoord[0], oPatch.TexCoord[1], oPatch.TexCoord[2]);
    Normal = interpolate3D(oPatch.Normal[0], oPatch.Normal[1], oPatch.Normal[2]);
	vec3 Tangent = interpolate3D(oPatch.Tangent[0], oPatch.Tangent[1], oPatch.Tangent[2]);
	TexCoordTerr = TexCoord.xy/(dispFactor/0.2f);
	
	float Displacement = texture(displacementMap, (TexCoord.xy)/(dispFactor/0.2f)).x;     
	FragPos = Normal * Displacement * -dispFactor;
	
	 float u = gl_TessCoord.x;
    float v = gl_TessCoord.y;
    float w = gl_TessCoord.z;

    float uPow3 = pow(u, 3);
    float vPow3 = pow(v, 3);
    float wPow3 = pow(w, 3);
    float uPow2 = pow(u, 2);
    float vPow2 = pow(v, 2);
    float wPow2 = pow(w, 2);
	
    FragPos += oPatch.WorldPos_B300 * wPow3 +
			oPatch.WorldPos_B030 * uPow3 +
			oPatch.WorldPos_B003 * vPow3 +
			oPatch.WorldPos_B210 * 3.0 * wPow2 * u +
			oPatch.WorldPos_B120 * 3.0 * w * uPow2 +
			oPatch.WorldPos_B201 * 3.0 * wPow2 * v +
			oPatch.WorldPos_B021 * 3.0 * uPow2 * v +
			oPatch.WorldPos_B102 * 3.0 * w * vPow2 +
			oPatch.WorldPos_B012 * 3.0 * u * vPow2 +
			oPatch.WorldPos_B111 * 6.0 * w * u * v;
	
	Normal = Normal+GetNormal((TexCoord.xy)/(dispFactor/0.2f));
	
	for (int i = 0 ; i < NUM_CASCADES ; i++) {
       DirectionalLightSpacePos[i] = DirectionalLightTransforms[i]* vec4(FragPos, 1.0);
    }
	
	TexCoord = TexCoord.xy/(dispFactor*0.07f); 
	
	TBN = CalcTBN(Normal, Tangent);
	
	vec4 ClipSpacePosition= Projection* View* vec4(FragPos, 1.0);  

	gl_Position = ClipSpacePosition;
	ClipSpacePosZ = gl_Position.z;
	
	ClipSpacePos = ClipSpacePosition;
	PrevClipSpacePos = prevPVM* vec4(FragPos,1.0);
}                                                    